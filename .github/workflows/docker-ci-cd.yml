name: "Docker CI/CD"

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggers
    inputs:
      build_and_push:
        description: "Build and push latest release image?"
        required: false
        type: boolean
        default: true

jobs:
  deploy-docker:
    name: Deploy to Docker Hub
    if: ${{ github.event_name == 'release' || github.event.inputs.build_and_push == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine Version Tag
        id: version_tag
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION_TAG="${GITHUB_REF#refs/tags/}"
          else
            VERSION_TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          fi
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "Using version tag: $VERSION_TAG"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ env.VERSION_TAG }},${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:buildcache
          cache-to: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          
  deploy-production:
    name: Deploy to Production Server
    needs: deploy-docker
    if: ${{ always() && (needs.deploy-docker.result == 'success' || needs.deploy-docker.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: Restart/redeploy the app on the VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.VPS_PATH }}
            docker compose -f compose.yml -p amano-bot down --rmi all
            docker compose -f compose.yml -p amano-bot up -d --pull always
